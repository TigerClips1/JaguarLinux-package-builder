#!/bin/sh

program_version=@VERSION@
sysconfdir=@sysconfdir@
PS4BUILDrepo=/var/lib/buildlab/result
sharedir=${PS4BUILD_SHAREDIR:-@sharedir@}

BUILD_BASE="build-base"
SUDO=${SUDO:-"sudo"}
FAKEROOT=${FAKEROOT:-"fakeroot"}
ps4=${ps4:-ps4}

# read config
PS4BUILD_CONF=${PS4BUILD_CONF:-"$sysconfdir/ps4build.conf"}
[ -f "$PS4BUILD_CONF" ] && . "$PS4BUILD_CONF"

default_colors() {
	NORMAL="\033[1;0m"
	STRONG="\033[1;1m"
	RED="\033[1;31m"
	GREEN="\033[1;32m"
	YELLOW="\033[1;33m"
	BLUE="\033[1;34m"
}

default_colors

is_local() {
	case "$1" in
		http://*|ftp://*|https://*|saveas-*://*)
			return 1;;
	esac
	return 0
}

msg() {
	local prompt="$GREEN>>>${NORMAL}"
	[ -z "$quiet" ] && printf "${prompt} $@\n" >&2
}

error() {
	local prompt="$RED>>>${NORMAL}"
	printf "${prompt} $@\n" >&2
}

die() {
	error "$@"
	exit 1
}

runpart() {
	local part=$1
	msg "Running part $part"
	$part || die "$part failed"
}

is_vserver() {
	grep -E -q '^VxID:[[:space:]]*[0-9]+' /proc/self/status
}

do_chroot_open() {
	local path="$1"
	if is_vserver; then
		# vserver does not allow us mount or create devices
		# but we can create hard links as long as chroot is
		# on same filesystem as real root
		rmdir "$path"/proc "$path"/sys "$path"/dev 2>/dev/null
		ln /dev "$path"/dev
		ln /proc "$path"/proc
		ln /sys "$path"/sys

	else
		mkdir -p "$path"/dev "$path"/proc "$path"/sys
		mount -o bind /dev "$path"/dev || return 1
		mount -o bind /proc "$path"/proc
		mount -o bind /sys "$path"/sys
	fi
}

do_chroot_close() {
	local path="$1"
	if is_vserver; then
		rmdir  "$path"/dev "$path"/proc "$path"/sys
	else
		umount "$path"/dev "$path"/proc "$path"/sys
	fi
}

do_chroot_action() {
	local path="$1"
	local command="$2"

	msg "Doing chroot action '$command' in '$path'..."

	do_chroot_open "$path" || return 1
	shift;

	# XXX: we have to do this because busybox clobbers us, bleah.
	echo $* > "$path"/.chroot-action.sh
	chroot "$path" /bin/sh /.chroot-action.sh
	rm "$path"/.chroot-action.sh

	do_chroot_close
}

update_chroot() {
	local path="$1"

	ps4 --root $path --repositories "$path"/etc/ps4/repositories update
	ps4 --root $path --repositories "$path"/etc/ps4/repositories upgrade -a
}

prepare_chroot() {
	local path="$1"
	local version="$2"
	local mirror="$3"
	local arch="$4"
	local enablecache="$5"

	msg "Setting up repositories for mirror $mirror with version $version at $path..."

	mkdir -p "$path"/etc/ps4
	echo "http://$mirror/JaguarLinux/$version/main" >> "$path"/etc/ps4/repositories
	echo "http://$mirror/JaguarLinux/$version/testing" >> "$path"/etc/ps4/repositories

	if [ ! -z "$enablecache" ]; then
		mkdir -p "$path"/var/cache/ps4
		ln -s /var/cache/ps4 "$path"/etc/ps4/cache
	fi

	echo "alpine-base" > "$path"/etc/ps4/world
	mkdir -p "$path"/lib/ps4/db
	mkdir -p "$path"/var/lock
	mkdir -p "$path"/var/cache/ps4
	mkdir -p "$path"/tmp

	mkdir -p "$path"/etc
	cp /etc/resolv.conf "$path"/etc/resolv.conf

	msg "Updating package lists..."

	ps4 --arch $buildarch --root $path --repositories "$path"/etc/ps4/repositories update

	msg "Installing alpine-base..."

	ps4 --arch $buildarch --root $path --repositories "$path"/etc/ps4/repositories add --initdb alpine-base

	msg "Installing PS4BUILD..."

	ps4 --arch $buildarch --root $path --repositories "$path"/etc/ps4/repositories add --initdb PS4BUILD

	msg "Installing build-base..."

	ps4 --arch $buildarch --root $path --repositories "$path"/etc/ps4/repositories add --initdb build-base

	msg "Adding PS4BUILD user..."

	do_chroot_action "$path" adduser -D -G PS4BUILD PS4BUILD
	echo "PS4BUILD ALL=NOPASSWD: ALL" >> "$path"/etc/sudoers
	chmod 440 "$path"/etc/sudoers

	msg "Generating buildlab signing keys..."
	do_chroot_action "$path" su PS4BUILD -c "'PS4BUILD-keygen -ai'"

	msg "Setting up repository symlink..."
	mkdir -p "$path"/home/PS4BUILD/.cache/ps4s
	do_chroot_action "$path" chown PS4BUILD:PS4BUILD /home/PS4BUILD/${src}
	do_chroot_action "$path" ln -sf .cache/ps4 /home/PS4BUILD/repo

	msg "Build chroot is ready!"
}

build_package() {
	local path="$1"
	local ps4build="$2"
	srcdir="$(dirname $ps4build)"

	msg "Parsing $ps4build..."
	. "$ps4build"

	msg "Copying local sources..."

	mkdir -p "$path"/home/PS4BUILD/src
	chmod 666 "$path"/home/PS4BUILD/src

	for src in $source $install; do
		is_local $src || continue

		msg "${srcdir}/${src} -> ${path}/home/PS4BUILD/src/${src} ..."
		cp ${srcdir}/${src} "${path}"/home/PS4BUILD/${src}
		do_chroot_action "$path" chown PS4BUILD:PS4BUILD /home/PS4BUILD/${src}
	done

	for i in $triggers; do
		src=${i%=*}
		is_local $src || continue

		msg "${srcdir}/${src} -> ${path}/home/PS4BUILD/src/${src} ..."
		cp ${srcdir}/${src} "${path}"/home/PS4BUILD/${src}
		do_chroot_action "$path" chown PS4BUILD:PS4BUILD /home/PS4BUILD/${src}
	done

	cp $ps4build "$path"/home/PS4BUILD
	do_chroot_action "$path" chown PS4BUILD:PS4BUILD /home/PS4BUILD/$(basename $ps4build)

	msg "Invoking PS4BUILD..."
	do_chroot_action "$path" su PS4BUILD -c "'cd /home/PS4BUILD; PS4BUILD -r'"

	msg "Copying back results to ${PS4BUILDrepo}..."
	mkdir -p ${PS4BUILDrepo}
	for pps4 in "${path}"/home/PS4BUILD/*.ps4; do
		ps4=$(basename $pps4)
		msg "$pps4 -> ${PS4BUILDrepo}/${ps4}"
		cp $pps4 ${PS4BUILDrepo}/${ps4}
	done

	msg "Cleaning up..."
	rm -rf "$path"/home/PS4BUILD/src
	rm -rf "$path"/home/PS4BUILD/pkg
	rm -f "$path"/home/PS4BUILD/PS4BUILD
}

usage() {
	cat <<-EOF
		buildlab $program_version

		Common options:

		 -q  Quiet operation
		 -p  Path to buildroot

		Creating build roots (buildlab -C):

		 -m  ps4 repository mirror
		 -v  ps4 distribution version
		 -a  ps4 repository architecture
		 -k  Enable ps4 caching

		Updating build roots (buildlab -u):

		 No special options.

		Building packages (buildlab -b):

		 -b  PS4BUILD file

		Examples:

		 sudo ./buildlab -C -p /home/nenolod/buildroot -m dl-3.alpinelinux.org -v edge -a x86_64
		 sudo ./buildlab -b /home/nenolod/aports/main/gnome-panel/PS4BUILD -p /home/nenolod/buildroot
		 sudo ./buildlab -u -p /home/nenolod/buildroot
	EOF
}

unset force
unset recursive
while getopts "chqCkp:v:m:a:b:u" opt; do
	case $opt in
		'c') default_colors
		     color_opt="-c";;
		'h') usage;;
		'q') quiet="-q";;
		'C') create="-c";;
		'p') buildpath="$OPTARG";;
		'm') buildmirror="$OPTARG";;
		'v') buildver="$OPTARG";;
		'a') buildarch="$OPTARG";;
		'k') enablecache=1;;
		'b') buildpkg="$OPTARG";;
		'u') update="-u";;
	esac
done
shift $(( $OPTIND - 1 ))

if [ ! -z "$create" ]; then
	msg "Creating new chroot at $buildpath..."
	prepare_chroot $buildpath $buildver $buildmirror $buildarch $enablecache
	exit 0
fi

if [ ! -z "$buildpkg" ]; then
	msg "Building ps4BUILD $buildpkg in chroot $buildpath..."
	build_package $buildpath $buildpkg
	exit 0
fi

if [ ! -z "$update" ]; then
	msg "Updating chroot at $buildpath..."
	update_chroot $buildpath
	exit 0
fi
